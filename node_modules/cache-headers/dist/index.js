'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var url = _interopDefault(require('url'));
var globject = _interopDefault(require('globject'));
var slasher = _interopDefault(require('glob-slasher'));
var regular = _interopDefault(require('regular'));
var isEmpty = _interopDefault(require('lodash.isempty'));

/**
 * Maps to keys in the different cache methods
 * @type {Object}
 */

var KEY_LAST_MODIFIED = 'lastModified';
var KEY_STALE_IF_ERROR = 'staleError';
var KEY_STALE_WHILE_REVALIDATE = 'staleRevalidate';
var KEY_SURROGATE_CONTROL = 'maxAge';

/**
 * @ignore
 * User: daletan
 * Date: 12/19/15
 * Time: 10:25 PM
 * Copyright 1stdibs.com, Inc. 2015. All Rights Reserved.
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @param {*} val The value to check if it is an actual object. Arrays are not considered objects in this case
 * @return {boolean}
 */
function isValidObject(val) {
  return !Array.isArray(val) && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && !isEmpty(val);
}

/**
 *
 * @param {*} val The value to check if it is like a number ie. 100 and "100" would return true
 * @return {boolean}
 */
function isNumberLike(val) {
  return regular.number.test(val);
}

/**
 * Format a UTC Date value
 * @param {object} options
 * @param {number} [options.date=new Date()] UTC time format. A JavaScript date object
 * @return {string} header date string in GMT format
 */
function formatDate() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$date = options.date,
      date = _options$date === undefined ? new Date() : _options$date;

  if (date && date.toString() === 'Invalid Date' || !date) {
    // covers if the following are passed in:
    // new Date('invalid_date_string')
    // date = null
    date = new Date();
  }
  return date.toUTCString();
}

/**
 * @ignore
 * User: daletan
 * Date: 12/24/15
 * Time: 9:51 AM
 * Copyright 1stdibs.com, Inc. 2015. All Rights Reserved.
 */

// time set in seconds

var ONE_MINUTE = 60;
var TEN_MINUTES = 600;
var HALF_HOUR = 1800;
var ONE_HOUR = 3600;
var ONE_DAY = 86400;
var ONE_WEEK = 604800;
var ONE_MONTH = 2592000; // 30 days
var ONE_YEAR = 31536000;



var timeValues = Object.freeze({
	ONE_MINUTE: ONE_MINUTE,
	TEN_MINUTES: TEN_MINUTES,
	HALF_HOUR: HALF_HOUR,
	ONE_HOUR: ONE_HOUR,
	ONE_DAY: ONE_DAY,
	ONE_WEEK: ONE_WEEK,
	ONE_MONTH: ONE_MONTH,
	ONE_YEAR: ONE_YEAR
});

var PRIVATE_VALUE = 'private';
var NO_CACHE_NO_STORE = 'no-cache, no-store, must-revalidate';

// TODO: add parser that can understand string input for header values
// ie: 'private, max-age=300

/**
 * If a number or number-like, return the value as a number
 * If a string, and it is in a the `timeValues` map, return that time value
 * @param {number|string|*} value
 * @return {number|string}
 */
function getTimeValue(value) {
    if (isNumberLike(value)) {
        return Number(value);
    } else if (typeof value === 'string') {
        // checks for values listed in ./timeValues
        value = value.toUpperCase();
        if (timeValues[value]) {
            return timeValues[value];
        }
    }
    // if no valid value, always return a number
    console.warn('no cached value found. ' + value + ' was passed in. returning 0');
    return 0;
}

/**
 *
 * @param {boolean} setPrivate Used for user-specific pages
 * @returns {*}
 */
function generateBrowserCacheHeader(setPrivate) {
    if (setPrivate) {
        return PRIVATE_VALUE + ', ' + NO_CACHE_NO_STORE;
    }
    return NO_CACHE_NO_STORE;
}

/**
 * @param {string|number} maxAge
 * @returns {string}
 */
function generateMaxAgeHeader(maxAge) {
    return 'max-age=' + getTimeValue(maxAge);
}

/**
 * @param {string|number} maxAge
 * @returns {string}
 */
function generateStaleRevalidateCacheHeader(maxAge) {
    return 'stale-while-revalidate=' + getTimeValue(maxAge);
}

/**
 * @param {string|number} maxAge
 * @returns {string}
 */
function generateStaleError(maxAge) {
    return 'stale-if-error=' + getTimeValue(maxAge);
}

/**
 * All options can use a string value. See {@link module:timeValues} for all available values
 * Returns the cache header name as the key for res.set()
 * @memberof module:cacheControl
 * @alias generate
 * @param {object} [options] Caching options
 * @param {number|string} [options.staleRevalidate=false] Time when to refresh the content in the background
 * @param {number|string} [options.staleIfError=false] Time to allow for serving cache when there is an error from a back-end service
 * @param {boolean} [options.setPrivate=false] use the `private` cache header value for user-specific pages
 * @returns {{Cache-Control: string}}
 */
function generateCacheControl(options) {
    var _options$staleRevalid = options.staleRevalidate,
        staleRevalidate = _options$staleRevalid === undefined ? false : _options$staleRevalid,
        _options$staleError = options.staleError,
        staleError = _options$staleError === undefined ? false : _options$staleError,
        _options$setPrivate = options.setPrivate,
        setPrivate = _options$setPrivate === undefined ? false : _options$setPrivate;

    var cacheHeaders = [generateBrowserCacheHeader(setPrivate)];

    if (typeof staleRevalidate !== 'boolean') {
        cacheHeaders.push(generateStaleRevalidateCacheHeader(staleRevalidate));
    }

    if (typeof staleError !== 'boolean') {
        cacheHeaders.push(generateStaleError(staleError));
    }

    return {
        'Cache-Control': '' + cacheHeaders.join(', ')
    };
}

/**
 * Returns the cache header name as the key for res.set()
 * @param {object} options
 * @param {number|string} [options.maxAge=timeValues.TEN_MINUTES] The browser cache length
 * @param {boolean} [options.setPrivate=false] Set the max-age value to 0 for user-specific pages
 * @returns {{Surrogate-Control: string}}
 */
function generateSurrogateControl(options) {
    var _options$setPrivate2 = options.setPrivate,
        setPrivate = _options$setPrivate2 === undefined ? false : _options$setPrivate2;
    var maxAge = options.maxAge;

    if (maxAge === undefined) {
        // only default this if maxAge is undefined
        // since 0 can be passed in
        maxAge = TEN_MINUTES;
    }
    // always force time to 0 if setPrivate - usually user-specific content
    var time = setPrivate ? 0 : maxAge;

    return {
        'Surrogate-Control': generateMaxAgeHeader(time)
    };
}

function generatePragmaHeader() {
    return {
        'Pragma': 'no-cache'
    };
}

function generateExpiresHeader() {
    return {
        'Expires': 0
    };
}

function generateLastModifiedHeader(options) {
    var _options$lastModified = options.lastModified,
        lastModified = _options$lastModified === undefined ? false : _options$lastModified;
    var _options$setPrivate3 = options.setPrivate,
        setPrivate = _options$setPrivate3 === undefined ? false : _options$setPrivate3;


    if (setPrivate) {
        lastModified = formatDate();
    }

    return lastModified ? { 'Last-Modified': lastModified } : {};
}

/**
 * @see `generateCacheControl`, `generateSurrogateControl`, and `generateLastModifiedHeader` for options
 * @param options
 * @returns {*[]}
 */
function generateAllCacheHeaders() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return Object.assign({}, generateCacheControl(options), generateSurrogateControl(options), generatePragmaHeader(), generateExpiresHeader(), generateLastModifiedHeader(options));
}

/**
 * @ignore
 * User: daletan
 * Date: 12/19/15
 * Time: 8:49 PM
 * Copyright 1stdibs.com, Inc. 2015. All Rights Reserved.
 */

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * This will either set a specific header or defer to using express' res.set() functionality
 * {{@link http://expressjs.com/en/api.html#res.set}}
 * @param {object} res The current response object
 * @param {object} headerData
 */
function setHeader(res, headerData) {
    res.set(headerData);
}

/**
 * {{@link module:cacheControl#generate}} for acceptable values
 * @param {object} pathsConfig Cache settings with glob path patterns
 * @return {Function}
 */
function setupInitialCacheHeaders(pathsConfig) {
    pathsConfig = pathsConfig || {};

    return function (req, res, next) {
        // current path (prefixed with a slash)
        var pathname = slasher(url.parse(req.originalUrl).pathname);

        /**
         * Takes a pathname and returns the first config whose glob key matches
         *
         * @param pathname - pathname prefixed with slash
         * @function
         */
        var getCacheConfig = globject(slasher(pathsConfig, { value: false }));

        // options by default are set to config
        var options = getCacheConfig(pathname);

        if (options === false) {
            var _options;

            // current path doesn't match any glob key in pathsConfig
            options = (_options = {}, _defineProperty(_options, KEY_SURROGATE_CONTROL, 0), _defineProperty(_options, 'setPrivate', true), _options);
        } else if (isNumberLike(options)) {
            // catch `0` before !cacheValue check
            // make sure to convert value to actual number
            options = _defineProperty({}, KEY_SURROGATE_CONTROL, Number(options));
        }

        setHeader(res, generateAllCacheHeaders(options));

        next();
    };
}

/**
 *
 * {{@link module:cacheControl#generate}} for acceptable values
 * @param {object} overrideConfig cacheSettings to override default
 * @returns {function(*, *=, *)}
 */
function overrideCacheHeaders(overrideConfig) {
    return function (req, res, next) {

        var options = overrideConfig;
        if (overrideConfig === false) {
            var _options3;

            options = (_options3 = {}, _defineProperty(_options3, KEY_SURROGATE_CONTROL, 0), _defineProperty(_options3, 'setPrivate', true), _options3);
        }

        if (isValidObject(options)) {
            setHeader(res, generateAllCacheHeaders(options));
        }

        next();
    };
}

exports.setupInitialCacheHeaders = setupInitialCacheHeaders;
exports.overrideCacheHeaders = overrideCacheHeaders;
exports.KEY_LAST_MODIFIED = KEY_LAST_MODIFIED;
exports.KEY_STALE_IF_ERROR = KEY_STALE_IF_ERROR;
exports.KEY_STALE_WHILE_REVALIDATE = KEY_STALE_WHILE_REVALIDATE;
exports.KEY_SURROGATE_CONTROL = KEY_SURROGATE_CONTROL;
exports.ONE_MINUTE = ONE_MINUTE;
exports.TEN_MINUTES = TEN_MINUTES;
exports.HALF_HOUR = HALF_HOUR;
exports.ONE_HOUR = ONE_HOUR;
exports.ONE_DAY = ONE_DAY;
exports.ONE_WEEK = ONE_WEEK;
exports.ONE_MONTH = ONE_MONTH;
exports.ONE_YEAR = ONE_YEAR;
